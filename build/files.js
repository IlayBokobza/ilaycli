"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//node server files
var mongo = function (projectName) { return "const mongoose = require('mongoose')\n//connects to db\nmongoose.connect('mongodb://127.0.0.1:27017/" + projectName + "',{\n    useNewUrlParser:true,\n    useCreateIndex:true,\n    useUnifiedTopology:true,\n    useFindAndModify:false,\n})"; };
var fullNodeIndex = "const express = require('express')\n\n//start express\nconst app = express()\n\n//confing express to parse json\napp.use(express.json())\n\n//port swich for prod and dev\nconst port = process.env.PORT || 3000\n\n//runs file which connects to db\nrequire('./db/mongoose.js')\n\n//loads routes\nconst userRoutes = require('./routes/user')\napp.use(userRoutes)\n\n\n//listens for port (3000 for dev)\napp.listen(port,() => {\n    console.log(`Runing on port ${port}`)\n})";
var nodeIndexMongo = "const express = require('express')\n\n//start express\nconst app = express()\n\n//confing express to parse json\napp.use(express.json())\n\n//port swich for prod and dev\nconst port = process.env.PORT || 3000\n\n//runs file which connects to db\nrequire('./db/mongoose.js')\n\n\n//listens for port (3000 for dev)\napp.listen(port,() => {\n    console.log(`Runing on port ${port}`)\n})";
var normalNodeServer = "const express = require('express')\n\n//start express\nconst app = express()\n\n//confing express to parse json\napp.use(express.json())\n\n//port swich for prod and dev\nconst port = process.env.PORT || 3000\n\n//listens for port (3000 for dev)\napp.listen(port,() => {\n    console.log(`Runing on port ${port}`)\n})";
var userSchema = "const mongoose = require('mongoose')\nconst validator = require('validator')\nconst bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\n\n//constrctor for user\nconst userSchema = mongoose.Schema({\n    name:{\n        type:String,\n        required:true,\n        trim:true\n    },\n    email:{\n        type:String,\n        required:true,\n        trim:true,\n        lowercase:true,\n        unique:true,\n        validate(email){\n            if(!validator.default.isEmail(email)){\n                throw new Error('Please proived a valid email')\n            }\n        }\n    },\n    password:{\n        type:String,\n        required:true,\n        trim:true,\n    },\n    tokens:[{\n        token:{\n            type:String,\n            required:true\n        }\n    }]\n})\n\n// hashes password on create/change\nuserSchema.pre('save', async function(next){\n\n    //if password was set/changes\n    if(this.isModified('password')){\n        this.password = await bcrypt.hash(this.password,8)\n    }\n\n    next()\n})\n\n\n//methods for new jwt\nuserSchema.methods.generateAuthToken = async function(){\n    const user = this\n    const token = jwt.sign({_id:user._id.toString()},'secretTokenKey')\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n\n    return token\n}\n\n//deletes private data before sending to user\nuserSchema.methods.toJSON = function() {\n    const userObject = this.toObject()\n\n    delete userObject.password\n    delete userObject.tokens\n    delete userObject.__v\n\n    return userObject\n}\n\nconst User = mongoose.model('User',userSchema) \n\n//exports it\nmodule.exports = User";
var authMiddleware = "const jwt = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer ','')\n        const decoded = jwt.verify(token,'secretTokenKey')\n        const user = await User.findOne({ _id: decoded._id, 'tokens.token':token })\n\n        if(!user){\n            throw new Error()\n        }\n\n        req.token = token\n        req.user = user   \n        next()\n    } catch (err) {\n        res.status(401).send({ error: 'Please authenticate' })\n    }\n}\n\nmodule.exports = auth";
var userRoutes = "const express = require('express')\nconst router = new express.Router()\nconst bcrypt = require('bcryptjs')\nconst User = require('../models/user')\n\n//auth middleware\nconst auth = require('../middleware/auth')\n\n//create new user\nrouter.post('/api/users/signup',async (req,res) => {\n    try {\n        const user = new User(req.body)\n        await user.save()\n\n        //new auth token\n        const token = await user.generateAuthToken()\n\n        //send\n        res.status(201).send({user,token})\n\n        res.send()\n\n    } catch (err) {\n        if(err.keyPattern.email){\n            return res.status(400).send('Email already taken')\n        }\n        res.status(500).send(err)\n    }\n})\n\n\n//login user\nrouter.post('/api/users/login', async (req,res) => {\n    try {\n        //looks for user\n        const user = await User.findOne({email:req.body.email})\n\n        //if user was not found\n        if(!user){\n            return res.status(400).send({error:'Email or password are incorrect.'})\n        }\n\n        const isPasswordOk = await bcrypt.compare(req.body.password,user.password)\n\n        //if password in correct\n        if(!isPasswordOk){\n            return res.status(400).send({error:'Email or password are incorrect.'})\n        }\n\n        //new auth token\n        const token = await user.generateAuthToken()\n\n        //send\n        res.send({ user, token })\n    } catch (err) {\n        res.status(500).send('Server error') \n    }\n})\n\n\n//logout user and delete token\nrouter.post('/api/users/logout',auth,async (req,res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter(token => {\n            return token.token !== req.token\n        })\n\n        await req.user.save()\n        res.send(req.user)\n        \n    } catch (err) {\n        res.status(500).send('Server error')\n    }\n})\n\n\n//get user data\nrouter.get('/api/users/me',auth,(req,res) => {\n    try {\n        res.send(req.user)\n    } catch (err) {\n        res.status(500).send('Server error')\n    }\n})\n\n\n//edit user\nrouter.patch('/api/users/me',auth, async (req,res) => {\n    try{\n\n        //checks for invaild operations\n        const updates = Object.keys(req.body)\n        const allowedUpdate = ['name','email','password']\n        const isVaildOperation = updates.every(update => allowedUpdate.includes(update))\n\n\n        if(!isVaildOperation){\n            return res.status(500).send({ error:'Unallowed changes' })\n        }\n        \n\n        updates.forEach(update => req.user[update] = req.body[update])\n        await req.user.save()\n\n        res.send(req.user)\n    } catch (err) {\n        res.status(500).send('Server error') \n    }\n})\n\n\n//delete user\nrouter.delete('/api/users/me',auth,async (req,res) => {\n    try {\n        await req.user.remove()\n        \n        res.send(req.user)\n    } catch (err) {\n        res.status(500).send(err)\n    }\n})\n\nmodule.exports = router";
exports.default = {
    nodeServer: {
        mongo: mongo,
        fullNodeIndex: fullNodeIndex,
        nodeIndexMongo: nodeIndexMongo,
        normalNodeServer: normalNodeServer,
        userSchema: userSchema,
        authMiddleware: authMiddleware,
        userRoutes: userRoutes,
    }
};
